{"ast":null,"code":"var _jsxFileName = \"/Users/harjotsingh/Desktop/repos/pharmabotics/pharmaboticsfrontend/src/pages/Doctor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Doctor = ({\n  doctorName\n}) => {\n  _s();\n  const [userId, setUserId] = useState('');\n  const [userName, setUserName] = useState('');\n  const [medicineName, setMedicineName] = useState('');\n  const [medicineInterval, setMedicineInterval] = useState(0);\n  const [medicineDosage, setMedicineDosage] = useState(0);\n  const [message, setMessage] = useState('');\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    getUsers(); // Fetch users initially when the component mounts\n    const interval = setInterval(() => {\n      getUsers(); // Setup interval to fetch users every second\n    }, 1000);\n    return () => clearInterval(interval); // Cleanup the interval on component unmount\n  }, []);\n  const enrollUser = async () => {\n    try {\n      const response = await axios.post('http://localhost:3001/enroll', {\n        id: userId,\n        name: userName,\n        medicines: [{\n          name: medicineName,\n          interval: medicineInterval,\n          dosage: medicineDosage\n        }]\n      });\n      setMessage('User enrolled successfully');\n    } catch (error) {\n      setMessage(error.response.data.message);\n    }\n  };\n  const getUsers = async () => {\n    try {\n      const response = await axios.get('http://localhost:3001/users');\n      setUsers(response.data);\n    } catch (error) {\n      setMessage(error.response.data.message); // Display the error message from the server\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Doctor Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Users:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: users.filter(user => user.name !== doctorName) // Filter out the doctor from the users list\n        .map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [user.name, \" (User ID: \", user.id, \")\", /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: user.medicines.map(medicine => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Medicine: \", medicine.name, \", Interval: \", medicine.interval, \" hours, Dosage: \", medicine.dosage, \", Next Time: \", medicine.nextDosageTimeFormatted]\n            }, medicine.name, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 33\n          }, this)]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(Doctor, \"qxdK2T1yUMVCU8gAlOPMJKbTIbs=\");\n_c = Doctor;\nvar _c;\n$RefreshReg$(_c, \"Doctor\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Doctor","doctorName","_s","userId","setUserId","userName","setUserName","medicineName","setMedicineName","medicineInterval","setMedicineInterval","medicineDosage","setMedicineDosage","message","setMessage","users","setUsers","getUsers","interval","setInterval","clearInterval","enrollUser","response","post","id","name","medicines","dosage","error","data","get","children","fileName","_jsxFileName","lineNumber","columnNumber","filter","user","map","medicine","nextDosageTimeFormatted","_c","$RefreshReg$"],"sources":["/Users/harjotsingh/Desktop/repos/pharmabotics/pharmaboticsfrontend/src/pages/Doctor.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nexport const Doctor = ({ doctorName }) => {\n    const [userId, setUserId] = useState('');\n    const [userName, setUserName] = useState('');\n    const [medicineName, setMedicineName] = useState('');\n    const [medicineInterval, setMedicineInterval] = useState(0);\n    const [medicineDosage, setMedicineDosage] = useState(0);\n    const [message, setMessage] = useState('');\n    const [users, setUsers] = useState([]);\n\n    useEffect(() => {\n        getUsers(); // Fetch users initially when the component mounts\n        const interval = setInterval(() => {\n            getUsers(); // Setup interval to fetch users every second\n        }, 1000);\n\n        return () => clearInterval(interval); // Cleanup the interval on component unmount\n    }, []);\n\n    const enrollUser = async () => {\n        try {\n            const response = await axios.post('http://localhost:3001/enroll', {\n                id: userId,\n                name: userName,\n                medicines: [{\n                    name: medicineName,\n                    interval: medicineInterval,\n                    dosage: medicineDosage\n                }]\n            });\n            setMessage('User enrolled successfully');\n        } catch (error) {\n            setMessage(error.response.data.message);\n        }\n    };\n\n    const getUsers = async () => {\n        try {\n            const response = await axios.get('http://localhost:3001/users');\n            setUsers(response.data);\n        } catch (error) {\n            setMessage(error.response.data.message); // Display the error message from the server\n        }\n    };\n\n    return (\n        <div>\n            <h1>Doctor Screen</h1>\n\n            <div>\n                <h2>Users:</h2>\n                <ul>\n                    {users\n                        .filter(user => user.name !== doctorName) // Filter out the doctor from the users list\n                        .map(user => (\n                            <li key={user.id}>\n                                {user.name} (User ID: {user.id})\n                                <ul>\n                                    {user.medicines.map(medicine => (\n                                        <li key={medicine.name}>\n                                            Medicine: {medicine.name}, Interval: {medicine.interval} hours, Dosage: {medicine.dosage}, Next Time: {medicine.nextDosageTimeFormatted}\n                                        </li>\n                                    ))}\n                                </ul>\n                            </li>\n                        ))}\n                </ul>\n            </div>\n        </div>\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}